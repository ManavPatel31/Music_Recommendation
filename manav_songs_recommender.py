# -*- coding: utf-8 -*-
"""Manav_songs_recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y3B0dg1i06kPvL6Z6KdwiHRZLGJ0G2r3
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import re

songs_manav = pd.read_json("/content/meta_Digital_Music.json", lines = True)

"""##**Data Exploration**"""

songs_manav

songs_manav.info

songs_manav.describe

#checking for empty values
songs_manav.astype(bool).sum(axis=0)

#checking for null values
songs_manav.isnull().sum()

songs_manav.columns

songs_manav = songs_manav.drop(['tech1', 'fit', 'also_buy', 'tech2', 'feature', 'similar_item', 'date', 'imageURL', 'imageURLHighRes','main_cat','details','also_view','asin','category'], axis=1)

songs_manav.columns

songs_manav['price'].describe()

songs_manav['price'].value_counts()

songs_manav['brand'].describe()

songs_manav['rank'].value_counts()

"""###**Feature Engineering**"""

songs_manav['price'] = songs_manav['price'].apply(lambda x: re.sub(r'\$', '', x))

songs_manav['price'] = songs_manav['price'].apply(lambda x: re.sub(r'#actionPanel\s*(.*?)\s*#instantOrderUpdate_feature_div', '', x))

songs_manav['price'] = songs_manav['price'].apply(lambda x: re.sub(r'\.a-section\.a-spacing-mini\s*{.*?}', '', x))

songs_manav['price'] = songs_manav['price'].str.strip()

songs_manav['price'] = songs_manav['price'].str.replace(r'[^\d.]+','').replace('', '0.0')

songs_manav['price']

"""###**Cleaning and Exploring rank column**"""

songs_manav['rank'] = songs_manav['rank'].str.replace(r'[^\d]+','').fillna('0')

songs_manav['rank'] = songs_manav['rank'].astype(int)

"""###**Cleaning and Exploring description column**"""

songs_manav = songs_manav.explode('description')
songs_manav['description'] = songs_manav['description'].fillna('')
songs_manav['description'] = songs_manav['description'].apply(lambda x: re.sub(r'<.*?>|http\S+|&amp;','', x))
songs_manav['description'] = songs_manav['description'].apply(lambda x: ' '.join(x))

"""###**Cleaning and Exploring title column**"""

songs_manav['title'] = songs_manav['title'].fillna('')
songs_manav['title'] = songs_manav['title'].apply(lambda x: re.sub(r'<.*?>|http\S+|&amp;','', x))

songs_manav['text'] = songs_manav['title'] + ' ' + songs_manav['description']

songs_manav['text']

songs_manav.drop_duplicates(subset=['text'], inplace=True)

"""###**Creating Tf-TDF vectors for the textual representation**"""

tfidf = TfidfVectorizer(stop_words='english')
tfidf = tfidf.fit_transform(songs_manav['text'])

tfidf.shape

"""###**Checking the cosine similarity**"""

cosine_sim = cosine_similarity(tfidf[:30000], tfidf[:30000])
type(cosine_sim)

print(cosine_sim[1,1])

print(cosine_sim[1,0])

indices = pd.Series(songs_manav.index, index=songs_manav['title']).drop_duplicates(inplace=False)

"""###**Creating music recommender function**"""

def music_recommender(title, cosine_sim=cosine_sim, df=songs_manav, indices=indices):
    # Obtain the index of the music that matches the title
    idx = indices[title]
    # Get the pairwsie similarity scores of all music with that movie
    # And convert it into a list of tuples as described above
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the music based on the cosine similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 10 most similar music. Ignore the first music.
    sim_scores = sim_scores[1:11]

    # Get the music indices
    music_indices = [i[0] for i in sim_scores]

    # Return the top 10 most similar music
    return df['title'].iloc[music_indices]

# To check if the function is running properly
music_recommender('MY FIRST KARIE')

while True:
    music = input("Enter song title otherwise type exit\n")
    if music.lower() == 'exit':
        break
    elif music in songs_manav['title'].values:
        print("--------------------------------------------------")
        print("Giving recommendation for :-  \n",music,"\n")
        print(music_recommender(music))
        
    else:
        print("We donâ€™t have recommendations for :- ",music)

